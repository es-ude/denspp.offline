import torch
import torch.nn as nn
import torch.functional as F

class spikedeeptector_model(nn.Module):
    def __init__(self):
        super().__init__()
        self.norm = nn.BatchNorm2d(1)
        self.conv1 = nn.Conv2d(in_channels=1, out_channels=25, kernel_size=(20, 10))
        self.batchnorm1 = nn.BatchNorm2d(25)
        self.relu1 = nn.ReLU()
        self.dropout1 = nn.Dropout2d(p=0.5)
        self.conv2 = nn.Conv2d(in_channels=25, out_channels=25, kernel_size=(1, 10))
        self.batchnorm2 = nn.BatchNorm2d(25)
        self.relu2 = nn.ReLU()
        self.pool1 = nn.MaxPool2d(kernel_size=(1, 2))
        self.conv3 = nn.Conv2d(in_channels=25, out_channels=50, kernel_size=(1, 5))
        self.batchnorm3 = nn.BatchNorm2d(50)
        self.relu3 = nn.ReLU()
        self.dropout2 = nn.Dropout2d(p=0.5)
        self.pool2 = nn.MaxPool2d(kernel_size=(1, 2))
        self.flatten = nn.Flatten()
        self.fc1 = nn.Linear(in_features=250, out_features=100)
        self.relu7 = nn.ReLU()
        self.fc2 = nn.Linear(in_features=100, out_features=2)
        self.softmax = nn.Softmax()

    def forward(self, x: torch.tensor) -> torch.tensor:
        print('in: ', x.shape)
        x = self.norm(x)
        x = self.conv1(x)
        print('conv1: ', x.shape)
        x = self.batchnorm1(x)
        x = self.relu1(x)
        x = self.dropout1(x)
        x = self.conv2(x)
        print('conv2: ', x.shape)
        x = self.relu2(x)
        x = self.pool1(x)
        print('pool1: ', x.shape)
        x = self.conv3(x)
        print('conv3: ', x.shape)
        x = self.batchnorm3(x)
        x = self.relu3(x)
        x = self.dropout2(x)
        x = self.pool2(x)
        print('pool2: ', x.shape)
        x = self.flatten(x)
        print('flatten: ', x.shape)
        x = self.fc1(x)
        print('fc1: ', x.shape)
        x = self.relu7(x)
        x = self.fc2(x)
        print('fc2: ', x.shape)
        x = self.softmax(x)
        return x